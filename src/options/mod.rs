mod parse;

use std::net::{IpAddr};
pub use self::parse::parse;

#[derive(Debug, PartialEq)]
pub enum DhcpOption {
    Pad,
    SubnetMask(IpAddr),
    TimeOffset(i32),
    Router(Vec<IpAddr>),
    TimeServer,
    NameServer,
    DomainNameServer,
    LogServer,
    CookieServer,
    LPRServer,
    ImpressServer,
    ResourceLocationServer,
    HostName,
    BootFileSize,
    MeritDumpFile,
    DomainName,
    SwapServer,
    RootPath,
    ExtensionsPath,
    IPForwarding,
    NonLocalSourceRouting,
    PolicyFilter,
    MaxDatagramReassemblySize,
    DefaultIPTTL,
    PathMTUAgingTimeout,
    PathMTUPlateauTable,
    InterfaceMTU,
    AllSubnetsAreLocal,
    BroadcastAddress,
    PerformMaskDiscovery,
    MaskSupplier,
    PerformRouterDiscovery,
    RouterSolicitationAddress,
    StaticRoute,
    TrailerEncapsulation,
    ARPCacheTimeout,
    EthernetEncapsulation,
    TCPDefaultTTL,
    TCPKeepaliveInterval,
    TCPKeepaliveGarbage,
    NISDomain,
    NetworkInformationServers,
    NTPServers,
    VendorExtensions,
    NetBIOSNameServers,
    NetBIOSDatagramDistributionServer,
    NetBIOSNodeType,
    NetBIOSScope,
    XFontServer,
    XDisplayManager,
    // DHCP-specific options
    RequestedIPAddress,
    IPAddressLeaseTime,
    OptionOverload,
    MessageType,
    ServerIdentifier,
    ParamRequestList,
    Message,
    MaxMessageSize,
    RenewalTimeValue,
    RebindingTimeValue,
    ClassIdentifier,
    ClientIdentifier,
    End,
}

//impl DhcpOption {
//    pub fn from_bytes<T: AsRef<[u8]>>(&self, bytes: T) -> {
//    }
//}
